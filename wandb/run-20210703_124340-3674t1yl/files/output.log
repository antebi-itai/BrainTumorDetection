> /home/labs/waic/itaian/BrainTumorDetection/train.py(37)train()
     35 def train(model, criterion, accuracy, optimizer, train_loader, test_loader, epochs, device):
     36     import pdb; pdb.set_trace()
---> 37     for epoch in tqdm(range(epochs)):
     38         for (images, tumor_types), (test_images, test_tumor_types) in zip(train_loader, cycle(test_loader)):
     39             # train
  0%|          | 0/4 [00:00<?, ?it/s]
> /home/labs/waic/itaian/BrainTumorDetection/train.py(38)train()
     36     import pdb; pdb.set_trace()
     37     for epoch in tqdm(range(epochs)):
---> 38         for (images, tumor_types), (test_images, test_tumor_types) in zip(train_loader, cycle(test_loader)):
     39             # train
     40             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
> /home/labs/waic/itaian/BrainTumorDetection/train.py(40)train()
     38         for (images, tumor_types), (test_images, test_tumor_types) in zip(train_loader, cycle(test_loader)):
     39             # train
---> 40             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
     41                        images=images, tumor_types=tumor_types, mode="Train")
     42             # test
> /home/labs/waic/itaian/BrainTumorDetection/train.py(41)train()
     39             # train
     40             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
---> 41                        images=images, tumor_types=tumor_types, mode="Train")
     42             # test
     43             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
*** NameError: name 'model_acc' is not defined
*** NameError: name 'model_acc' is not defined
> /home/labs/waic/itaian/BrainTumorDetection/train.py(40)train()
     38         for (images, tumor_types), (test_images, test_tumor_types) in zip(train_loader, cycle(test_loader)):
     39             # train
---> 40             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
     41                        images=images, tumor_types=tumor_types, mode="Train")
     42             # test
> /home/labs/waic/itaian/BrainTumorDetection/train.py(43)train()
     41                        images=images, tumor_types=tumor_types, mode="Train")
     42             # test
---> 43             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
     44                        images=test_images, tumor_types=test_tumor_types, mode="Test")
     45             # update best model if necessary
tensor(0.9558, device='cuda:0')
tensor(0.9558, device='cuda:0')
> /home/labs/waic/itaian/BrainTumorDetection/train.py(44)train()
     42             # test
     43             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
---> 44                        images=test_images, tumor_types=test_tumor_types, mode="Test")
     45             # update best model if necessary
     46             best_models_dict = get_best_models_dict()
> /home/labs/waic/itaian/BrainTumorDetection/train.py(43)train()
     41                        images=images, tumor_types=tumor_types, mode="Train")
     42             # test
---> 43             model_acc = train_loop(model=model, criterion=criterion, accuracy=accuracy, optimizer=optimizer, device=device,
     44                        images=test_images, tumor_types=test_tumor_types, mode="Test")
     45             # update best model if necessary
> /home/labs/waic/itaian/BrainTumorDetection/train.py(46)train()
     44                        images=test_images, tumor_types=test_tumor_types, mode="Test")
     45             # update best model if necessary
---> 46             best_models_dict = get_best_models_dict()
     47             if model.name not in best_models_dict or model_acc > best_models_dict[model.name]:
     48                 update_best_models(model, model_acc, best_models_dict)

  0%|          | 0/4 [04:50<?, ?it/s]