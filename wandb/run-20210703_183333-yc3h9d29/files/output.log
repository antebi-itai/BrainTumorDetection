
loading best model from: ./Models/vgg19.pth
  2%|▏         | 4/256 [00:01<02:06,  2.00it/s]
Model's accuracy:  tensor(0.9274, device='cuda:0')





































































 99%|█████████▉| 253/256 [02:20<00:01,  1.79it/s]
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(105)generate_heatmap()
    103         for channel, heatmap in features.items():
    104             import pdb; pdb.set_trace()
--> 105             binary_heatmap = normalize_numpy(torch.cat(heatmap).reshape((height, width)).cpu().numpy())
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)

100%|██████████| 256/256 [02:22<00:00,  1.80it/s]
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(106)generate_heatmap()
    104             import pdb; pdb.set_trace()
    105             binary_heatmap = normalize_numpy(torch.cat(heatmap).reshape((height, width)).cpu().numpy())
--> 106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
    108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + \
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(107)generate_heatmap()
    105             binary_heatmap = normalize_numpy(torch.cat(heatmap).reshape((height, width)).cpu().numpy())
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
--> 107             heatmaps[channel] = binary_heatmap
    108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + \
    109                                         0.5 * normalize_numpy(original_image.squeeze().permute(1, 2, 0).cpu().numpy())
<matplotlib.image.AxesImage object at 0x2af398d20d30>
<matplotlib.image.AxesImage object at 0x2af398f13790>
0
255
0
255
0
254
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(108)generate_heatmap()
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
--> 108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + \
    109                                         0.5 * normalize_numpy(original_image.squeeze().permute(1, 2, 0).cpu().numpy())
    110
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(109)generate_heatmap()
    107             heatmaps[channel] = binary_heatmap
    108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + \
--> 109                                         0.5 * normalize_numpy(original_image.squeeze().permute(1, 2, 0).cpu().numpy())
    110
    111         # Log heatmaps
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(108)generate_heatmap()
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
--> 108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + \
    109                                         0.5 * normalize_numpy(original_image.squeeze().permute(1, 2, 0).cpu().numpy())
    110
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(103)generate_heatmap()
    101         heatmaps = {}
    102         overlay_heatmaps = {}
--> 103         for channel, heatmap in features.items():
    104             import pdb; pdb.set_trace()
    105             binary_heatmap = normalize_numpy(torch.cat(heatmap).reshape((height, width)).cpu().numpy())
dict_keys(['L2C55'])
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
<matplotlib.image.AxesImage object at 0x2af36fa81ee0>
<matplotlib.image.AxesImage object at 0x2af398cfcc70>