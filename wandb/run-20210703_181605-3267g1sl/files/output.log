
loading best model from: ./Models/vgg19.pth
  0%|          | 1/256 [00:00<00:46,  5.54it/s]
Model's accuracy:  tensor(0.9235, device='cuda:0')






































































 99%|█████████▉| 253/256 [02:20<00:01,  1.79it/s]
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(104)generate_heatmap()
    102         for channel, heatmap in features.items():
    103             import pdb; pdb.set_trace()
--> 104             binary_heatmap = torch.cat(heatmap).reshape((height, width)).cpu().numpy()
    105             binary_heatmap = (((binary_heatmap - binary_heatmap.min()) / (binary_heatmap.max() - binary_heatmap.min())) * 256).astype("uint8")

100%|██████████| 256/256 [02:21<00:00,  1.80it/s]
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(105)generate_heatmap()
    103             import pdb; pdb.set_trace()
    104             binary_heatmap = torch.cat(heatmap).reshape((height, width)).cpu().numpy()
--> 105             binary_heatmap = (((binary_heatmap - binary_heatmap.min()) / (binary_heatmap.max() - binary_heatmap.min())) * 256).astype("uint8")
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
<matplotlib.image.AxesImage object at 0x2af398e63af0>
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(106)generate_heatmap()
    104             binary_heatmap = torch.cat(heatmap).reshape((height, width)).cpu().numpy()
    105             binary_heatmap = (((binary_heatmap - binary_heatmap.min()) / (binary_heatmap.max() - binary_heatmap.min())) * 256).astype("uint8")
--> 106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
    108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + 0.5 * original_image.numpy()
<matplotlib.image.AxesImage object at 0x2af398cb69d0>
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(107)generate_heatmap()
    105             binary_heatmap = (((binary_heatmap - binary_heatmap.min()) / (binary_heatmap.max() - binary_heatmap.min())) * 256).astype("uint8")
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
--> 107             heatmaps[channel] = binary_heatmap
    108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + 0.5 * original_image.numpy()
    109
<matplotlib.image.AxesImage object at 0x2af3984b3a30>
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(108)generate_heatmap()
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
--> 108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + 0.5 * original_image.numpy()
    109
    110         # Log heatmaps
TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.
> /home/labs/waic/itaian/BrainTumorDetection/experiment.py(108)generate_heatmap()
    106             colorful_heatmap = cv2.applyColorMap(binary_heatmap, cv2.COLORMAP_JET)
    107             heatmaps[channel] = binary_heatmap
--> 108             overlay_heatmaps[channel] = 0.5 * colorful_heatmap + 0.5 * original_image.numpy()
    109
    110         # Log heatmaps