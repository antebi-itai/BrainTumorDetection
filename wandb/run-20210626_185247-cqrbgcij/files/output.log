> /home/labs/waic/itaian/BrainTumorDetection/train.py(12)train()
     10         for images, tumor_types in loader:
     11             import pdb; pdb.set_trace()
---> 12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
     13             # Run the model on the input batch
     14             pred_tumors_scores = model(images)
  0%|          | 0/3 [00:00<?, ?it/s]
> /home/labs/waic/itaian/BrainTumorDetection/train.py(14)train()
     12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
     13             # Run the model on the input batch
---> 14             pred_tumors_scores = model(images)
     15
     16             # Calculate the loss (and acc) for this batch
> /home/labs/waic/itaian/BrainTumorDetection/train.py(17)train()
     15
     16             # Calculate the loss (and acc) for this batch
---> 17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
> /home/labs/waic/itaian/BrainTumorDetection/train.py(18)train()
     16             # Calculate the loss (and acc) for this batch
     17             loss = criterion(pred_tumors_scores, tumor_types)
---> 18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(19)train()
     17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
---> 19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(20)train()
     18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
---> 20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(21)train()
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
---> 21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
     23             wandb.log({"Train/accuracy": acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(19)train()
     17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
---> 19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(20)train()
     18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
---> 20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(21)train()
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
---> 21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
     23             wandb.log({"Train/accuracy": acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(19)train()
     17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
---> 19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(22)train()
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
---> 22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
     23             wandb.log({"Train/accuracy": acc})
     24
> /home/labs/waic/itaian/BrainTumorDetection/train.py(23)train()
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
---> 23             wandb.log({"Train/accuracy": acc})
     24
     25             # Calculate the gradients of all parameter w.r.t. the loss
tensor(0.5500, device='cuda:0')
> /home/labs/waic/itaian/BrainTumorDetection/train.py(26)train()
     24
     25             # Calculate the gradients of all parameter w.r.t. the loss
---> 26             optimizer.zero_grad()
     27             backward(loss)
     28             # Update the weights (learn!)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU(inplace=True)
  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (3): ReLU(inplace=True)
  (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (6): ReLU(inplace=True)
  (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (8): ReLU(inplace=True)
  (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (11): ReLU(inplace=True)
  (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (13): ReLU(inplace=True)
  (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (15): ReLU(inplace=True)
  (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (17): ReLU(inplace=True)
  (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (20): ReLU(inplace=True)
  (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (22): ReLU(inplace=True)
  (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (24): ReLU(inplace=True)
  (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (26): ReLU(inplace=True)
  (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (29): ReLU(inplace=True)
  (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (31): ReLU(inplace=True)
  (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (33): ReLU(inplace=True)
  (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (35): ReLU(inplace=True)
  (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
)
Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Parameter containing:
tensor([[[[-5.3474e-02, -4.9257e-02, -6.7942e-02],
          [ 1.5314e-02,  4.5068e-02,  2.1444e-03],
          [ 3.6226e-02,  1.9999e-02,  1.9864e-02]],
         [[ 1.7015e-02,  5.5403e-02, -6.2293e-03],
          [ 1.4165e-01,  2.2705e-01,  1.3758e-01],
          [ 1.2000e-01,  2.0030e-01,  9.2114e-02]],
         [[-4.4885e-02,  1.2680e-02, -1.4497e-02],
          [ 5.9742e-02,  1.3955e-01,  5.4102e-02],
          [-9.6141e-04,  5.8304e-02, -2.9663e-02]]],
        [[[ 2.6072e-01, -3.0489e-01, -5.0152e-01],
          [ 4.1376e-01, -2.0831e-01, -4.9086e-01],
          [ 5.8770e-01,  4.2851e-01, -1.3850e-01]],
         [[ 2.8746e-01, -3.3338e-01, -4.5564e-01],
          [ 3.7836e-01, -2.9144e-01, -4.9720e-01],
          [ 5.4778e-01,  4.8983e-01, -1.7166e-01]],
         [[ 6.7260e-02, -9.5386e-02, -3.8037e-02],
          [ 6.1955e-02, -1.3125e-01, -1.0691e-01],
          [ 4.8107e-02,  2.2999e-01, -3.0578e-02]]],
        [[[-3.2457e-02,  1.6281e-01,  5.9687e-02],
          [ 1.3960e-01,  3.7732e-01,  2.3204e-01],
          [ 3.0062e-02,  1.9476e-01,  8.5276e-02]],
         [[-9.5406e-02,  9.6072e-02, -2.5564e-02],
          [ 2.3299e-02,  2.8450e-01,  9.4697e-02],
          [-1.4335e-01, -6.8587e-05, -1.0202e-01]],
         [[-1.2480e-01,  5.2403e-02, -2.6687e-02],
          [-4.1414e-02,  1.7935e-01,  4.9905e-02],
          [-1.1839e-01, -2.0942e-02, -1.0207e-01]]],
        ...,
        [[[-5.2884e-02, -1.1182e-01, -2.2377e-02],
          [-1.8517e-01, -2.6329e-01, -4.5673e-02],
          [-1.2462e-01, -1.5776e-01, -2.5907e-02]],
         [[-6.8542e-02, -1.0528e-01, -5.6703e-02],
          [-1.4858e-01, -1.7634e-01,  3.1325e-02],
          [-9.2168e-02, -4.9276e-02,  3.2291e-02]],
         [[ 1.2216e-01,  2.0694e-01,  1.8405e-01],
          [ 1.5762e-01,  2.3937e-01,  2.8790e-01],
          [ 8.4974e-02,  1.7520e-01,  1.5766e-01]]],
        [[[ 2.5902e-02,  3.8224e-01,  2.9388e-01],
          [-4.7560e-01, -3.6006e-01,  2.3282e-01],
          [-2.2283e-01,  8.3313e-04,  1.5329e-01]],
         [[ 1.7674e-01,  3.8770e-01,  2.6036e-02],
          [-3.9036e-01, -5.0041e-01,  1.7150e-03],
          [ 6.1660e-02,  1.4792e-01,  5.1035e-02]],
         [[ 1.2967e-01,  7.5381e-02, -3.8851e-01],
          [ 5.0931e-02, -1.9381e-01, -1.7501e-01],
          [ 3.4483e-01,  2.1557e-01, -8.3478e-02]]],
        [[[-8.1056e-01, -7.4319e-01, -7.7885e-01],
          [-1.6934e-01,  3.4232e-01, -7.0197e-02],
          [ 5.2494e-01,  9.5989e-01,  7.6209e-01]],
         [[ 7.9164e-02,  2.4559e-01, -1.5317e-01],
          [-7.0860e-02,  4.4652e-01, -3.8074e-01],
          [-1.5309e-01,  1.2427e-01, -1.1070e-01]],
         [[ 5.2029e-01,  7.5736e-01,  6.2371e-01],
          [-1.0733e-01,  1.8762e-01, -1.2183e-01],
          [-6.6407e-01, -6.4891e-01, -5.5356e-01]]]], device='cuda:0',
       requires_grad=True)
Parameter containing:
tensor([-0.9130,  0.3068, -1.3064, -0.7762, -0.7888, -0.4155,  0.2666, -0.8560,
         0.3901,  0.1206,  0.2143,  0.3767,  0.2672, -0.8205,  0.0463,  0.4325,
         0.3040, -0.1048,  0.4146,  0.3701,  0.4728,  0.4447,  0.1775, -1.1050,
         0.3911, -0.8114,  0.0029,  0.2943,  0.2926,  0.5354,  0.4415,  0.4302,
         0.5140,  0.4039,  0.4905,  0.3326,  0.3844,  0.3955,  0.4361,  0.2157,
         0.2640,  0.3557, -0.7006, -0.0398,  0.1095, -1.2560,  0.0400, -0.2300,
         0.0763, -0.4009, -0.8053,  0.3830, -0.2696, -0.3153,  0.4309,  0.3720,
        -0.2352, -0.2580,  0.2720,  0.2830, -0.2227, -0.1897,  0.3060,  0.3920],
       device='cuda:0', requires_grad=True)
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace=True)
    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): ReLU(inplace=True)
    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace=True)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace=True)
    (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): ReLU(inplace=True)
    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (26): ReLU(inplace=True)
    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): ReLU(inplace=True)
    (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): ReLU(inplace=True)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): ReLU(inplace=True)
    (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=2, bias=True)
  )
)
Linear(in_features=4096, out_features=2, bias=True)
Parameter containing:
tensor([[ 0.0085, -0.0013,  0.0044,  ..., -0.0126,  0.0065, -0.0033],
        [-0.0083,  0.0103, -0.0147,  ..., -0.0095, -0.0104,  0.0007]],
       device='cuda:0', requires_grad=True)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(27)train()
     25             # Calculate the gradients of all parameter w.r.t. the loss
     26             optimizer.zero_grad()
---> 27             backward(loss)
     28             # Update the weights (learn!)
     29             optimizer.step()
> /home/labs/waic/itaian/BrainTumorDetection/train.py(29)train()
     25             # Calculate the gradients of all parameter w.r.t. the loss
     26             optimizer.zero_grad()
     27             backward(loss)
     28             # Update the weights (learn!)
---> 29             optimizer.step()
tensor([[ 0.0000,  0.0000, -0.0160,  ..., -0.0714, -0.0072,  0.0046],
        [ 0.0000,  0.0000,  0.0160,  ...,  0.0714,  0.0072, -0.0046]],
       device='cuda:0')
Parameter containing:
tensor([[[[-5.3474e-02, -4.9257e-02, -6.7942e-02],
          [ 1.5314e-02,  4.5068e-02,  2.1444e-03],
          [ 3.6226e-02,  1.9999e-02,  1.9864e-02]],
         [[ 1.7015e-02,  5.5403e-02, -6.2293e-03],
          [ 1.4165e-01,  2.2705e-01,  1.3758e-01],
          [ 1.2000e-01,  2.0030e-01,  9.2114e-02]],
         [[-4.4885e-02,  1.2680e-02, -1.4497e-02],
          [ 5.9742e-02,  1.3955e-01,  5.4102e-02],
          [-9.6141e-04,  5.8304e-02, -2.9663e-02]]],
        [[[ 2.6072e-01, -3.0489e-01, -5.0152e-01],
          [ 4.1376e-01, -2.0831e-01, -4.9086e-01],
          [ 5.8770e-01,  4.2851e-01, -1.3850e-01]],
         [[ 2.8746e-01, -3.3338e-01, -4.5564e-01],
          [ 3.7836e-01, -2.9144e-01, -4.9720e-01],
          [ 5.4778e-01,  4.8983e-01, -1.7166e-01]],
         [[ 6.7260e-02, -9.5386e-02, -3.8037e-02],
          [ 6.1955e-02, -1.3125e-01, -1.0691e-01],
          [ 4.8107e-02,  2.2999e-01, -3.0578e-02]]],
        [[[-3.2457e-02,  1.6281e-01,  5.9687e-02],
          [ 1.3960e-01,  3.7732e-01,  2.3204e-01],
          [ 3.0062e-02,  1.9476e-01,  8.5276e-02]],
         [[-9.5406e-02,  9.6072e-02, -2.5564e-02],
          [ 2.3299e-02,  2.8450e-01,  9.4697e-02],
          [-1.4335e-01, -6.8587e-05, -1.0202e-01]],
         [[-1.2480e-01,  5.2403e-02, -2.6687e-02],
          [-4.1414e-02,  1.7935e-01,  4.9905e-02],
          [-1.1839e-01, -2.0942e-02, -1.0207e-01]]],
        ...,
        [[[-5.2884e-02, -1.1182e-01, -2.2377e-02],
          [-1.8517e-01, -2.6329e-01, -4.5673e-02],
          [-1.2462e-01, -1.5776e-01, -2.5907e-02]],
         [[-6.8542e-02, -1.0528e-01, -5.6703e-02],
          [-1.4858e-01, -1.7634e-01,  3.1325e-02],
          [-9.2168e-02, -4.9276e-02,  3.2291e-02]],
         [[ 1.2216e-01,  2.0694e-01,  1.8405e-01],
          [ 1.5762e-01,  2.3937e-01,  2.8790e-01],
          [ 8.4974e-02,  1.7520e-01,  1.5766e-01]]],
        [[[ 2.5902e-02,  3.8224e-01,  2.9388e-01],
          [-4.7560e-01, -3.6006e-01,  2.3282e-01],
          [-2.2283e-01,  8.3313e-04,  1.5329e-01]],
         [[ 1.7674e-01,  3.8770e-01,  2.6036e-02],
          [-3.9036e-01, -5.0041e-01,  1.7150e-03],
          [ 6.1660e-02,  1.4792e-01,  5.1035e-02]],
         [[ 1.2967e-01,  7.5381e-02, -3.8851e-01],
          [ 5.0931e-02, -1.9381e-01, -1.7501e-01],
          [ 3.4483e-01,  2.1557e-01, -8.3478e-02]]],
        [[[-8.1056e-01, -7.4319e-01, -7.7885e-01],
          [-1.6934e-01,  3.4232e-01, -7.0197e-02],
          [ 5.2494e-01,  9.5989e-01,  7.6209e-01]],
         [[ 7.9164e-02,  2.4559e-01, -1.5317e-01],
          [-7.0860e-02,  4.4652e-01, -3.8074e-01],
          [-1.5309e-01,  1.2427e-01, -1.1070e-01]],
         [[ 5.2029e-01,  7.5736e-01,  6.2371e-01],
          [-1.0733e-01,  1.8762e-01, -1.2183e-01],
          [-6.6407e-01, -6.4891e-01, -5.5356e-01]]]], device='cuda:0',
       requires_grad=True)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(10)train()
      8
      9     for epoch in tqdm(range(epochs)):
---> 10         for images, tumor_types in loader:
     11             import pdb; pdb.set_trace()
     12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(11)train()
      9     for epoch in tqdm(range(epochs)):
     10         for images, tumor_types in loader:
---> 11             import pdb; pdb.set_trace()
     12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
     13             # Run the model on the input batch
> /home/labs/waic/itaian/BrainTumorDetection/train.py(12)train()
     10         for images, tumor_types in loader:
     11             import pdb; pdb.set_trace()
---> 12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
     13             # Run the model on the input batch
     14             pred_tumors_scores = model(images)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(14)train()
     12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
     13             # Run the model on the input batch
---> 14             pred_tumors_scores = model(images)
     15
     16             # Calculate the loss (and acc) for this batch
> /home/labs/waic/itaian/BrainTumorDetection/train.py(17)train()
     15
     16             # Calculate the loss (and acc) for this batch
---> 17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
> /home/labs/waic/itaian/BrainTumorDetection/train.py(18)train()
     16             # Calculate the loss (and acc) for this batch
     17             loss = criterion(pred_tumors_scores, tumor_types)
---> 18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(19)train()
     17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
---> 19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(20)train()
     18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
---> 20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(21)train()
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
---> 21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
     23             wandb.log({"Train/accuracy": acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(19)train()
     17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
---> 19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(20)train()
     18             wandb.log({"Train/loss": loss})
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
---> 20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(21)train()
     19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
---> 21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
     23             wandb.log({"Train/accuracy": acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(19)train()
     17             loss = criterion(pred_tumors_scores, tumor_types)
     18             wandb.log({"Train/loss": loss})
---> 19             for tumor_type, tumor_name in loader.dataset.tumor_type2name.items():
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
> /home/labs/waic/itaian/BrainTumorDetection/train.py(22)train()
     20                 tumor_acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=tumor_type)
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
---> 22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
     23             wandb.log({"Train/accuracy": acc})
     24
> /home/labs/waic/itaian/BrainTumorDetection/train.py(23)train()
     21                 wandb.log({"Train/accuracy/{tumor_name}".format(tumor_name=tumor_name): tumor_acc})
     22             acc = accuracy(pred_tumors_scores, tumor_types, tumor_type=None)
---> 23             wandb.log({"Train/accuracy": acc})
     24
     25             # Calculate the gradients of all parameter w.r.t. the loss
> /home/labs/waic/itaian/BrainTumorDetection/train.py(26)train()
     24
     25             # Calculate the gradients of all parameter w.r.t. the loss
---> 26             optimizer.zero_grad()
     27             backward(loss)
     28             # Update the weights (learn!)
Parameter containing:
tensor([[[[-5.2474e-02, -4.8257e-02, -6.6942e-02],
          [ 1.6314e-02,  4.6068e-02,  3.1444e-03],
          [ 3.7226e-02,  2.0999e-02,  2.0864e-02]],
         [[ 1.8015e-02,  5.6403e-02, -5.2293e-03],
          [ 1.4265e-01,  2.2805e-01,  1.3858e-01],
          [ 1.2100e-01,  2.0130e-01,  9.3114e-02]],
         [[-4.3885e-02,  1.3680e-02, -1.3497e-02],
          [ 6.0742e-02,  1.4055e-01,  5.5102e-02],
          [ 3.8588e-05,  5.9304e-02, -2.8663e-02]]],
        [[[ 2.5972e-01, -3.0589e-01, -5.0252e-01],
          [ 4.1276e-01, -2.0931e-01, -4.9186e-01],
          [ 5.8670e-01,  4.2751e-01, -1.3950e-01]],
         [[ 2.8646e-01, -3.3438e-01, -4.5664e-01],
          [ 3.7736e-01, -2.9244e-01, -4.9820e-01],
          [ 5.4678e-01,  4.8883e-01, -1.7266e-01]],
         [[ 6.6260e-02, -9.6386e-02, -3.9037e-02],
          [ 6.0955e-02, -1.3225e-01, -1.0791e-01],
          [ 4.7107e-02,  2.2899e-01, -3.1578e-02]]],
        [[[-3.3456e-02,  1.6181e-01,  5.8688e-02],
          [ 1.3860e-01,  3.7632e-01,  2.3104e-01],
          [ 2.9064e-02,  1.9376e-01,  8.4277e-02]],
         [[-9.6405e-02,  9.5073e-02, -2.6563e-02],
          [ 2.2300e-02,  2.8350e-01,  9.3698e-02],
          [-1.4435e-01, -1.0678e-03, -1.0302e-01]],
         [[-1.2580e-01,  5.1404e-02, -2.7686e-02],
          [-4.2412e-02,  1.7835e-01,  4.8905e-02],
          [-1.1939e-01, -2.1942e-02, -1.0307e-01]]],
        ...,
        [[[-5.3884e-02, -1.1282e-01, -2.3377e-02],
          [-1.8617e-01, -2.6429e-01, -4.6672e-02],
          [-1.2562e-01, -1.5876e-01, -2.6907e-02]],
         [[-6.9542e-02, -1.0628e-01, -5.7703e-02],
          [-1.4958e-01, -1.7734e-01,  3.0325e-02],
          [-9.3167e-02, -5.0276e-02,  3.1291e-02]],
         [[ 1.2116e-01,  2.0594e-01,  1.8305e-01],
          [ 1.5662e-01,  2.3837e-01,  2.8690e-01],
          [ 8.3974e-02,  1.7420e-01,  1.5666e-01]]],
        [[[ 2.4902e-02,  3.8124e-01,  2.9288e-01],
          [-4.7660e-01, -3.6106e-01,  2.3182e-01],
          [-2.2383e-01, -1.6686e-04,  1.5229e-01]],
         [[ 1.7574e-01,  3.8670e-01,  2.5036e-02],
          [-3.9136e-01, -5.0141e-01,  7.1504e-04],
          [ 6.0660e-02,  1.4692e-01,  5.0035e-02]],
         [[ 1.2867e-01,  7.4381e-02, -3.8951e-01],
          [ 4.9931e-02, -1.9481e-01, -1.7601e-01],
          [ 3.4383e-01,  2.1457e-01, -8.4478e-02]]],
        [[[-8.0956e-01, -7.4419e-01, -7.7985e-01],
          [-1.6834e-01,  3.4132e-01, -7.1197e-02],
          [ 5.2594e-01,  9.5889e-01,  7.6109e-01]],
         [[ 8.0164e-02,  2.4459e-01, -1.5417e-01],
          [-6.9860e-02,  4.4552e-01, -3.8174e-01],
          [-1.5209e-01,  1.2327e-01, -1.1170e-01]],
         [[ 5.2129e-01,  7.5636e-01,  6.2271e-01],
          [-1.0633e-01,  1.8662e-01, -1.2283e-01],
          [-6.6307e-01, -6.4991e-01, -5.5456e-01]]]], device='cuda:0',
       requires_grad=True)
tensor([[[[-1.6427e-03, -1.6403e-03, -1.6635e-03],
          [-1.6840e-03, -1.6950e-03, -1.7331e-03],
          [-1.6847e-03, -1.6703e-03, -1.6795e-03]],
         [[-1.6427e-03, -1.6403e-03, -1.6635e-03],
          [-1.6840e-03, -1.6950e-03, -1.7331e-03],
          [-1.6847e-03, -1.6703e-03, -1.6795e-03]],
         [[-1.6427e-03, -1.6403e-03, -1.6635e-03],
          [-1.6840e-03, -1.6950e-03, -1.7331e-03],
          [-1.6847e-03, -1.6703e-03, -1.6795e-03]]],
        [[[ 9.8668e-04,  1.4301e-03,  1.3723e-03],
          [ 1.2656e-03,  1.4832e-03,  1.4731e-03],
          [ 1.5274e-03,  1.4349e-03,  1.2955e-03]],
         [[ 9.8668e-04,  1.4301e-03,  1.3723e-03],
          [ 1.2656e-03,  1.4832e-03,  1.4731e-03],
          [ 1.5274e-03,  1.4349e-03,  1.2955e-03]],
         [[ 9.8668e-04,  1.4301e-03,  1.3723e-03],
          [ 1.2656e-03,  1.4832e-03,  1.4731e-03],
          [ 1.5274e-03,  1.4349e-03,  1.2955e-03]]],
        [[[ 1.0925e-05,  1.4479e-05,  1.5147e-05],
          [ 8.5194e-06,  1.4074e-05,  1.4579e-05],
          [ 4.8648e-06,  1.2893e-05,  1.4152e-05]],
         [[ 1.0925e-05,  1.4479e-05,  1.5147e-05],
          [ 8.5194e-06,  1.4074e-05,  1.4579e-05],
          [ 4.8648e-06,  1.2893e-05,  1.4152e-05]],
         [[ 1.0925e-05,  1.4479e-05,  1.5147e-05],
          [ 8.5194e-06,  1.4074e-05,  1.4579e-05],
          [ 4.8648e-06,  1.2893e-05,  1.4152e-05]]],
        ...,
        [[[ 4.7155e-05,  1.6193e-04,  2.3399e-04],
          [ 5.6212e-05,  1.8001e-04,  2.4874e-04],
          [ 7.2119e-05,  1.8740e-04,  2.4933e-04]],
         [[ 4.7155e-05,  1.6193e-04,  2.3399e-04],
          [ 5.6212e-05,  1.8001e-04,  2.4874e-04],
          [ 7.2119e-05,  1.8740e-04,  2.4933e-04]],
         [[ 4.7155e-05,  1.6193e-04,  2.3399e-04],
          [ 5.6212e-05,  1.8001e-04,  2.4874e-04],
          [ 7.2119e-05,  1.8740e-04,  2.4933e-04]]],
        [[[ 3.0773e-03,  3.1219e-03,  3.3466e-03],
          [ 3.0913e-03,  3.2789e-03,  3.3520e-03],
          [ 3.6167e-03,  3.6512e-03,  3.6537e-03]],
         [[ 3.0773e-03,  3.1219e-03,  3.3466e-03],
          [ 3.0913e-03,  3.2789e-03,  3.3520e-03],
          [ 3.6167e-03,  3.6512e-03,  3.6537e-03]],
         [[ 3.0773e-03,  3.1219e-03,  3.3466e-03],
          [ 3.0913e-03,  3.2789e-03,  3.3520e-03],
          [ 3.6167e-03,  3.6512e-03,  3.6537e-03]]],
        [[[-8.6111e-04,  3.9934e-04,  1.1513e-03],
          [-5.1849e-04,  8.7737e-04,  1.6178e-03],
          [-2.1751e-04,  1.3142e-03,  2.1379e-03]],
         [[-8.6111e-04,  3.9935e-04,  1.1513e-03],
          [-5.1849e-04,  8.7737e-04,  1.6178e-03],
          [-2.1751e-04,  1.3142e-03,  2.1379e-03]],
         [[-8.6111e-04,  3.9934e-04,  1.1513e-03],
          [-5.1849e-04,  8.7737e-04,  1.6178e-03],
          [-2.1751e-04,  1.3142e-03,  2.1379e-03]]]], device='cuda:0')
> /home/labs/waic/itaian/BrainTumorDetection/train.py(27)train()
     25             # Calculate the gradients of all parameter w.r.t. the loss
     26             optimizer.zero_grad()
---> 27             backward(loss)
     28             # Update the weights (learn!)
     29             optimizer.step()
tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],
        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],
        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],
        ...,
        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],
        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],
        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],
         [[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]], device='cuda:0')
> /home/labs/waic/itaian/BrainTumorDetection/train.py(29)train()
     25             # Calculate the gradients of all parameter w.r.t. the loss
     26             optimizer.zero_grad()
     27             backward(loss)
     28             # Update the weights (learn!)
---> 29             optimizer.step()
Parameter containing:
tensor([[[[-5.2474e-02, -4.8257e-02, -6.6942e-02],
          [ 1.6314e-02,  4.6068e-02,  3.1444e-03],
          [ 3.7226e-02,  2.0999e-02,  2.0864e-02]],
         [[ 1.8015e-02,  5.6403e-02, -5.2293e-03],
          [ 1.4265e-01,  2.2805e-01,  1.3858e-01],
          [ 1.2100e-01,  2.0130e-01,  9.3114e-02]],
         [[-4.3885e-02,  1.3680e-02, -1.3497e-02],
          [ 6.0742e-02,  1.4055e-01,  5.5102e-02],
          [ 3.8588e-05,  5.9304e-02, -2.8663e-02]]],
        [[[ 2.5972e-01, -3.0589e-01, -5.0252e-01],
          [ 4.1276e-01, -2.0931e-01, -4.9186e-01],
          [ 5.8670e-01,  4.2751e-01, -1.3950e-01]],
         [[ 2.8646e-01, -3.3438e-01, -4.5664e-01],
          [ 3.7736e-01, -2.9244e-01, -4.9820e-01],
          [ 5.4678e-01,  4.8883e-01, -1.7266e-01]],
         [[ 6.6260e-02, -9.6386e-02, -3.9037e-02],
          [ 6.0955e-02, -1.3225e-01, -1.0791e-01],
          [ 4.7107e-02,  2.2899e-01, -3.1578e-02]]],
        [[[-3.3456e-02,  1.6181e-01,  5.8688e-02],
          [ 1.3860e-01,  3.7632e-01,  2.3104e-01],
          [ 2.9064e-02,  1.9376e-01,  8.4277e-02]],
         [[-9.6405e-02,  9.5073e-02, -2.6563e-02],
          [ 2.2300e-02,  2.8350e-01,  9.3698e-02],
          [-1.4435e-01, -1.0678e-03, -1.0302e-01]],
         [[-1.2580e-01,  5.1404e-02, -2.7686e-02],
          [-4.2412e-02,  1.7835e-01,  4.8905e-02],
          [-1.1939e-01, -2.1942e-02, -1.0307e-01]]],
        ...,
        [[[-5.3884e-02, -1.1282e-01, -2.3377e-02],
          [-1.8617e-01, -2.6429e-01, -4.6672e-02],
          [-1.2562e-01, -1.5876e-01, -2.6907e-02]],
         [[-6.9542e-02, -1.0628e-01, -5.7703e-02],
          [-1.4958e-01, -1.7734e-01,  3.0325e-02],
          [-9.3167e-02, -5.0276e-02,  3.1291e-02]],
         [[ 1.2116e-01,  2.0594e-01,  1.8305e-01],
          [ 1.5662e-01,  2.3837e-01,  2.8690e-01],
          [ 8.3974e-02,  1.7420e-01,  1.5666e-01]]],
        [[[ 2.4902e-02,  3.8124e-01,  2.9288e-01],
          [-4.7660e-01, -3.6106e-01,  2.3182e-01],
          [-2.2383e-01, -1.6686e-04,  1.5229e-01]],
         [[ 1.7574e-01,  3.8670e-01,  2.5036e-02],
          [-3.9136e-01, -5.0141e-01,  7.1504e-04],
          [ 6.0660e-02,  1.4692e-01,  5.0035e-02]],
         [[ 1.2867e-01,  7.4381e-02, -3.8951e-01],
          [ 4.9931e-02, -1.9481e-01, -1.7601e-01],
          [ 3.4383e-01,  2.1457e-01, -8.4478e-02]]],
        [[[-8.0956e-01, -7.4419e-01, -7.7985e-01],
          [-1.6834e-01,  3.4132e-01, -7.1197e-02],
          [ 5.2594e-01,  9.5889e-01,  7.6109e-01]],
         [[ 8.0164e-02,  2.4459e-01, -1.5417e-01],
          [-6.9860e-02,  4.4552e-01, -3.8174e-01],
          [-1.5209e-01,  1.2327e-01, -1.1170e-01]],
         [[ 5.2129e-01,  7.5636e-01,  6.2271e-01],
          [-1.0633e-01,  1.8662e-01, -1.2283e-01],
          [-6.6307e-01, -6.4991e-01, -5.5456e-01]]]], device='cuda:0',
       requires_grad=True)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(10)train()
      8
      9     for epoch in tqdm(range(epochs)):
---> 10         for images, tumor_types in loader:
     11             import pdb; pdb.set_trace()
     12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
Parameter containing:
tensor([[[[-5.3021e-02, -4.8818e-02, -6.7498e-02],
          [ 1.5735e-02,  4.5479e-02,  2.5667e-03],
          [ 3.6639e-02,  2.0405e-02,  2.0282e-02]],
         [[ 1.7468e-02,  5.5842e-02, -5.7852e-03],
          [ 1.4207e-01,  2.2746e-01,  1.3801e-01],
          [ 1.2041e-01,  2.0070e-01,  9.2532e-02]],
         [[-4.4432e-02,  1.3119e-02, -1.4053e-02],
          [ 6.0163e-02,  1.3996e-01,  5.4525e-02],
          [-5.4896e-04,  5.8710e-02, -2.9245e-02]]],
        [[[ 2.5897e-01, -3.0664e-01, -5.0326e-01],
          [ 4.1202e-01, -2.1005e-01, -4.9261e-01],
          [ 5.8596e-01,  4.2676e-01, -1.4024e-01]],
         [[ 2.8571e-01, -3.3512e-01, -4.5739e-01],
          [ 3.7662e-01, -2.9319e-01, -4.9895e-01],
          [ 5.4604e-01,  4.8809e-01, -1.7341e-01]],
         [[ 6.5515e-02, -9.7132e-02, -3.9783e-02],
          [ 6.0209e-02, -1.3300e-01, -1.0866e-01],
          [ 4.6361e-02,  2.2825e-01, -3.2324e-02]]],
        [[[-3.4125e-02,  1.6114e-01,  5.8018e-02],
          [ 1.3793e-01,  3.7565e-01,  2.3037e-01],
          [ 2.8396e-02,  1.9309e-01,  8.3607e-02]],
         [[-9.7074e-02,  9.4404e-02, -2.7233e-02],
          [ 2.1631e-02,  2.8283e-01,  9.3028e-02],
          [-1.4502e-01, -1.7371e-03, -1.0369e-01]],
         [[-1.2646e-01,  5.0734e-02, -2.8356e-02],
          [-4.3081e-02,  1.7768e-01,  4.8236e-02],
          [-1.2006e-01, -2.2611e-02, -1.0374e-01]]],
        ...,
        [[[-5.4837e-02, -1.1378e-01, -2.4284e-02],
          [-1.8709e-01, -2.6520e-01, -4.7558e-02],
          [-1.2651e-01, -1.5965e-01, -2.7782e-02]],
         [[-7.0495e-02, -1.0724e-01, -5.8610e-02],
          [-1.5050e-01, -1.7826e-01,  2.9440e-02],
          [-9.4061e-02, -5.1160e-02,  3.0417e-02]],
         [[ 1.2020e-01,  2.0498e-01,  1.8214e-01],
          [ 1.5570e-01,  2.3745e-01,  2.8602e-01],
          [ 8.3081e-02,  1.7332e-01,  1.5578e-01]]],
        [[[ 2.5632e-02,  3.8197e-01,  2.9361e-01],
          [-4.7587e-01, -3.6033e-01,  2.3255e-01],
          [-2.2310e-01,  5.5728e-04,  1.5301e-01]],
         [[ 1.7647e-01,  3.8743e-01,  2.5761e-02],
          [-3.9063e-01, -5.0068e-01,  1.4413e-03],
          [ 6.1388e-02,  1.4764e-01,  5.0756e-02]],
         [[ 1.2940e-01,  7.5109e-02, -3.8878e-01],
          [ 5.0662e-02, -1.9408e-01, -1.7529e-01],
          [ 3.4456e-01,  2.1529e-01, -8.3757e-02]]],
        [[[-8.1030e-01, -7.4494e-01, -7.8060e-01],
          [-1.6908e-01,  3.4057e-01, -7.1946e-02],
          [ 5.2520e-01,  9.5814e-01,  7.6034e-01]],
         [[ 7.9422e-02,  2.4385e-01, -1.5492e-01],
          [-7.0602e-02,  4.4478e-01, -3.8249e-01],
          [-1.5283e-01,  1.2252e-01, -1.1245e-01]],
         [[ 5.2054e-01,  7.5561e-01,  6.2196e-01],
          [-1.0707e-01,  1.8588e-01, -1.2358e-01],
          [-6.6381e-01, -6.5066e-01, -5.5531e-01]]]], device='cuda:0',
       requires_grad=True)
> /home/labs/waic/itaian/BrainTumorDetection/train.py(12)train()
     10         for images, tumor_types in loader:
     11             import pdb; pdb.set_trace()
---> 12             images, tumor_types = images.to(device=device), tumor_types.to(device=device)
     13             # Run the model on the input batch

  0%|          | 0/3 [04:22<?, ?it/s]